"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[659],{51:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return b}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],s={title:"Styling",slug:"/Usage/styling"},l=void 0,c={unversionedId:"Usage/styling",id:"Usage/styling",isDocsHomePage:!1,title:"Styling",description:"The script itself does not take care of any styling whatsoever with the hopes that this flexibility will benefit you. That said, there is a specific html markup structure that is required, so you will need to hook your CSS rules into that structure.",source:"@site/docs/Usage/styling.md",sourceDirName:"Usage",slug:"/Usage/styling",permalink:"/a11y-tabs/Usage/styling",editUrl:"https://github.com/agnosticui/a11y-tabs/docs/edit/master/docs/Usage/styling.md",tags:[],version:"current",frontMatter:{title:"Styling",slug:"/Usage/styling"},sidebar:"docs",previous:{title:"Markup",permalink:"/a11y-tabs/Usage/markup"}},d=[],u={toc:d};function b(t){var e=t.components,n=(0,r.Z)(t,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The script itself does not take care of any styling whatsoever with the hopes that this flexibility will benefit you. That said, there is a specific html markup structure that is required, so you will need to hook your CSS rules into that structure."),(0,a.kt)("p",null,"It should be mentioned that the following CSS utilizes ",(0,a.kt)("em",{parentName:"p"},"logical properties"),". So ",(0,a.kt)("inlineCode",{parentName:"p"},"margin-left")," is replaced with ",(0,a.kt)("inlineCode",{parentName:"p"},"margin-inline-start")," and so on. We like this because it automatically supports writing directions (so ",(0,a.kt)("inlineCode",{parentName:"p"},"rtl")," ","\u201c","just works","\u201d"," for example). If you really must support IE11, you should probably avoid logical properties. Just replace ",(0,a.kt)("inlineCode",{parentName:"p"},"margin-inline-start")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"margin-left"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"margin-block-start")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"margin-top")," and so on and refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start"},"MDN docs"),"."),(0,a.kt)("p",null,"In any event, here's a basic CSS implementation to get you started:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"/* The main tabs container. We use SMACSS so this cannot be omitted. For example, if you use\n.tabs-vertical below, it will need to come after: class=\"tabs tabs-vertical\" */\n.tabs {\n  display: flex;\n  flex-direction: column;\n}\n.tabs-vertical {\n  flex-direction: row;\n}\n\n/* The tabs list styles */\n.tab-list {\n  /* You can switch these colors to theme you're tabs */\n  --tab-border-color: #cfd5db;\n  --tab-border-focus-color: #e9ecef;\n  --tab-color: #293344;\n  --tab-selected-color: #426bb1;\n  --tab-disabled-color: #999;\n  --tab-transition-duration: 200ms;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  flex: 0 0 auto;\n  padding-inline-start: 0;\n  margin-block-end: 0;\n  border-bottom: 1px solid var(--tab-border-color);\n  transition-property: all;\n  transition-duration: var(--tab-transition-duration);\n}\n/* In vertical orientation we want our tab buttons to stack */\n.tabs-vertical .tab-list,\n.tabs-vertical .tab-base {\n  flex-direction: column;\n  border: none;\n}\n\n/* The tab button styles. Essentially, we remove default button skins. Also note, we\nprefer the logical properties like margin-block-start over margin-left. This allows the\nCSS to work seemlessly with writing modes but comes at a price \u2014 no IE11 support. If you need\nthat, of course, use appropriate margins and paddings to do so. */\n.tab-button {\n  background-color: transparent;\n  border: 0;\n  border-radius: 0;\n  box-shadow: none;\n  margin: 0;\n}\n.tab-button:not(:first-of-type) {\n  margin-inline-start: -1px;\n}\n\n/* Skin of the buttons */\n.tab-button {\n  display: block;\n  padding-block-start: 0.5rem;\n  padding-block-end: 0.5rem;\n  padding-inline-start: 0.75rem;\n  padding-inline-end: 0.75rem;\n  line-height: 1.25rem;\n  color: var(--tab-color);\n  text-decoration: none;\n  transition: color var(--tab-transition-duration) ease-in-out, background-color var(--tab-transition-duration) ease-in-out, border-color var(--tab-transition-duration) ease-in-out;\n}\n\n/* This essentially removes the transition when the user has set their OS settings to prefer\nreduced motion. It's important to honor those settings! */\n@media screen and\n  (prefers-reduced-motion: reduce), \n  (update: slow) {\n  .tab-button {\n    --tab-transition-duration: 0.001ms !important;\n  }\n}\n\n/* The following styles are such that you will have the typical tab borders on your\ntab buttons. Of course you're free to do that all differently if you'd like, say,\nno borders but the active tab to have an underline. You can find more examples in\nthe AgnosticUI tabs.css code: https://github.com/AgnosticUI/agnosticui/blob/master/agnostic-css/src/components/tabs/tabs.css */\n\n.tab-item.tab-button {\n  margin-block-end: -1px;\n  background: 0 0;\n  border: 1px solid transparent;\n  /* Optional skinning if you want rounded tabs */\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n.tab-item.tab-button.active {\n  color:  var(--tab-selected-color);\n  background-color: #fff;\n  border-color: var(--tab-border-color) var(--tab-border-color) #fff;\n}\n\n.tab-item:hover,\n.tab-button:focus {\n  border-color: var(--tab-border-focus-color) var(--tab-border-focus-color) var(--tab-border-color);\n  isolation: isolate;\n  cursor: pointer;\n}\n\n.tabs-vertical .tab-button {\n  border: none;\n}\n")))}b.isMDXComponent=!0}}]);